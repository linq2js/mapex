{"version":3,"sources":["src/index.js"],"names":["imh","arguments","length","wrapMutator","model","apply","Object","assign","set","prop","each","unset","push","merge","mutations","mutator","Array","isArray","extra","context","createContext","value","applyMutations","items","concat","Error","hasChange","nextModel","map","currentValue","index","array","nextValue","objects","_","cloned","changedKeys","Set","forEach","object","entries","key","clone","add","size","reduceRight","prevMutations","mutateSingleProp","keys","reduce","mutation","result","root","clonedObjects","WeakMap","obj","get","slice","arrayEqual","a","b","every"],"mappings":"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","sourcesContent":["export default function imh() {\n  // create mutator\n  if (arguments.length < 2) {\n    return wrapMutator(arguments[0], function (model, apply) {\n      return apply(model);\n    });\n  }\n  return imh(arguments[1])(arguments[0]);\n}\n\nObject.assign(imh, {\n  set,\n  prop,\n  each,\n  unset,\n  push,\n  merge\n});\n\nfunction wrapMutator(mutations, mutator) {\n  if (!Array.isArray(mutations)) {\n    mutations = [mutations];\n  }\n  return function (model, extra, context) {\n    if (!context) {\n      context = createContext(model);\n    }\n    return mutator(\n      model,\n      function (value, extra) {\n        return applyMutations(value, context, extra, mutations);\n      },\n      context,\n      extra\n    );\n  };\n}\n\nexport function push(...items) {\n  return function (model) {\n    if (!items.length) return model;\n    return model.concat(items);\n  };\n}\n\nexport function each(mutations) {\n  return wrapMutator(mutations, function (model, apply) {\n    if (!Array.isArray(model)) {\n      throw new Error(\"Input value must be array\");\n    }\n\n    let hasChange = false;\n    const nextModel = model.map(function (currentValue, index, array) {\n      const nextValue = apply(currentValue, { index, array });\n      if (nextValue !== currentValue) {\n        hasChange = true;\n        return nextValue;\n      }\n      return currentValue;\n    });\n    return hasChange ? nextModel : model;\n  });\n}\n\nexport function merge(...objects) {\n  return function (model, _, context) {\n    let cloned = model;\n    const changedKeys = new Set();\n    objects.forEach(function (object) {\n      Object.entries(object).forEach(function ([key, value]) {\n        if (cloned[key] !== value) {\n          if (cloned === model) {\n            cloned = context.clone(model);\n          }\n          cloned[key] = value;\n          changedKeys.add(key);\n        }\n      });\n    });\n    if (changedKeys.size) {\n      let hasChange = false;\n      changedKeys.forEach(function (key) {\n        if (model[key] !== cloned[key]) {\n          hasChange = true;\n        }\n      });\n      if (!hasChange) return model;\n    }\n    return cloned;\n  };\n}\n\nexport function prop(key, mutations) {\n  if (Array.isArray(key)) {\n    return key.reduceRight(function (prevMutations, key) {\n      return [mutateSingleProp(key, prevMutations)];\n    }, mutations)[0];\n  }\n  return mutateSingleProp(key, mutations);\n}\n\nfunction mutateSingleProp(key, mutations) {\n  return wrapMutator(mutations, function (model, apply, context) {\n    if (typeof model === \"undefined\" || model === null) {\n      model = {};\n    }\n    const currentValue = model[key];\n    const nextValue = apply(currentValue);\n    if (currentValue === nextValue) {\n      return model;\n    }\n    const cloned = context.clone(model);\n    cloned[key] = nextValue;\n    return cloned;\n  });\n}\n\nexport function set(key, value) {\n  return function (model, extra, context) {\n    if (typeof model === \"undefined\" || model === null) {\n      model = {};\n    }\n    if (model[key] === value) return model;\n    const cloned = context.clone(model);\n    cloned[key] = value;\n    return cloned;\n  };\n}\n\nexport function unset(...keys) {\n  return function (model, extra, context) {\n    let cloned = model;\n    keys.forEach(function (key) {\n      if (key in cloned) {\n        if (cloned === model) {\n          cloned = context.clone(model);\n        }\n        delete cloned[key];\n      }\n    });\n    return cloned;\n  };\n}\n\nfunction applyMutations(model, context, extra, mutations) {\n  return mutations.reduce(function (value, mutation) {\n    const result = mutation(value, extra, context);\n    if (typeof result === \"function\") return result(value, context);\n    return result;\n  }, model);\n}\n\nfunction createContext(root) {\n  const clonedObjects = new WeakMap();\n  return {\n    root,\n    clone(obj, array) {\n      if (typeof obj !== \"object\") {\n        throw new Error(\"Cannot clone non-object value\");\n      }\n      let cloned = clonedObjects.get(obj);\n      if (cloned) return cloned;\n      if (Array.isArray(obj)) {\n        if (array === false)\n          throw new Error(\"Expected object type but got array type\");\n        cloned = obj.slice();\n      } else {\n        if (array === true)\n          throw new Error(\"Expected array type but got object type\");\n        cloned = Object.assign({}, obj);\n      }\n\n      return cloned;\n    }\n  };\n}\n\nfunction arrayEqual(a, b) {\n  return a.length === b.length && a.every((value, index) => value === b[index]);\n}\n"],"file":"index.js"}